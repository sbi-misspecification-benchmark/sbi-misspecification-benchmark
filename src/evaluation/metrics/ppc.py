import torch
import numpy as np


def compute_ppc(posterior_samples, observation, simulator):
    """
    Compute the posterior predictive check distance by simulating the "observation" from posterior samples
    and comparing it to the real observation

    Args:
        posterior_samples: samples generated by the inference step
        observation: real observation
        simulator: simulator object that maps theta to x

    Returns:
        float: average distance between simulated and real observation
    """

    simulated_x = simulator(posterior_samples)

    # compute the absolute distance between each pair
    l2_distance = torch.norm((observation - simulated_x), dim= -1)
    # torch.tensor([np.median(l2_distance.numpy()).astype(np.float32)]).item()   # From SBI
    # mean distance across all samples

    median = torch.median(l2_distance)

    score = median / (0.5 + median) # to ensure the score is in [0, 1]

    return score
